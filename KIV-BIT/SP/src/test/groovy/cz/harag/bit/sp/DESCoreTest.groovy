package cz.harag.bit.sp

import org.junit.Test

/**
 * Používá data z https://billstclair.com/grabbe/des.htm
 *
 * @author Patrik Harag
 * @version 2018-03-30
 */
class DESCoreTest {

    @Test
    void testEncryptDecrypt() {
        long[] keys = [
                0b000110_110000_001011_101111_111111_000111_000001_110010L,
                0b011110_011010_111011_011001_110110_111100_100111_100101L,
                0b010101_011111_110010_001010_010000_101100_111110_011001L,
                0b011100_101010_110111_010110_110110_110011_010100_011101L,
                0b011111_001110_110000_000111_111010_110101_001110_101000L,
                0b011000_111010_010100_111110_010100_000111_101100_101111L,
                0b111011_001000_010010_110111_111101_100001_100010_111100L,
                0b111101_111000_101000_111010_110000_010011_101111_111011L,
                0b111000_001101_101111_101011_111011_011110_011110_000001L,
                0b101100_011111_001101_000111_101110_100100_011001_001111L,
                0b001000_010101_111111_010011_110111_101101_001110_000110L,
                0b011101_010111_000111_110101_100101_000110_011111_101001L,
                0b100101_111100_010111_010001_111110_101011_101001_000001L,
                0b010111_110100_001110_110111_111100_101110_011100_111010L,
                0b101111_111001_000110_001101_001111_010011_111100_001010L,
                0b110010_110011_110110_001011_000011_100001_011111_110101L,
        ]

        long block = 0b00000001_00100011_01000101_01100111_10001001_10101011_11001101_11101111L
        long encrypted = DESCore.apply(block, keys)

        long expected = 0b10000101_11101000_00010011_01010100_00001111_00001010_10110100_00000101L
        assert encrypted == expected

        long decrypted = DESCore.apply(encrypted, keys.toList().reverse() as long[])
        assert decrypted == block
    }

    @Test
    void testE() {
        int rightHalfBlock = 0b11110000_10101010_11110000_10101010

        long expected = 0b01111010_00010101_01010101_01111010_00010101_01010101L
        assert BitUtils.expand(rightHalfBlock, DESCore.E) == expected
    }

    @Test
    void testP() {
        int block = 0b01011100_10000010_10110101_10010111

        int expected = 0b00100011_01001010_10101001_10111011
        assert BitUtils.permutate(block, DESCore.P) == expected
    }

    @Test
    void testF() {
        long key = 0b000110_110000_001011_101111_111111_000111_000001_110010
        int rightHalfBlock = 0b11110000_10101010_11110000_10101010

        int expected = 0b00100011_01001010_10101001_10111011
        assert DESCore.computeF(rightHalfBlock, key) == expected
    }

}